@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<ul id="ul1">
    @* <li>Tom,3,45000</li>
    <li>Jack,5,40000</li>
    <li>Mary,7,45000</li> *@
</ul>

@section Scripts{
    <script>

        const theUl = document.querySelector('#ul1');
        const emps = [{ "name": "Tom", "workYears": 3, "salary": 35000 },
        { "name": "Jack", "workYears": 5, "salary": 40000 },
        { "name": "Mary", "workYears": 7, "salary": 45000 }];


        //--(法3)
        const htmlEmps = emps.map((emp) => {
            const { name, workYears, salary } = emp;
            return (
                `<li>${name},${workYears},${salary}</li>`
            )
        })
        theUl.innerHTML = htmlEmps.join("");
        // console.log(htmlEmps);
        // console.log(htmlEmps.join(""));


        //JSON資料的讀取--(法1)
        // for (let i = 0, max = emps.length; i < max; i++) {
        //     console.log(emps[i].name);
        //     console.log(emps[i].workYears);
        //     console.log(emps[i].salary);
        // }


        //Array.方法() --(法2)
        // const docFrag = document.createDocumentFragment(); 
        // emps.forEach((emp) => { 
        //     // console.log(emp.name);
        //     // console.log(emp.workYears);
        //     // console.log(emp.salary);
        //     //emp.name + "," + emp.workYears + "," + emp.salary
        //     const eleLi = document.createElement("li"); //<li>
        //     const txtLi = document.createTextNode(`${emp.name},${emp.workYears},${emp.salary}`); //Tom,3,35000   //和createTextNode(emp.name + "," + emp.workYears + "," + emp.salary)一樣的意思
        //     eleLi.appendChild(txtLi); //<li>Tom,3,35000</li>
        //     //先加到空的容器中
        //     docFrag.appendChild(eleLi); //<ul><li>Tom,3,35000</li></ul>

        // })
        // theUl.appendChild(docFrag); //這時候才將資料顯示到網頁上





        // console.log(emps[1]); //{ "name": "Tom", "workYears": 3, "salary": 35000 }
        // console.log(emps[1].workYears);  //Tom

        //[] or {}
        // const datas = ["a", "b", "c"];
        // console.log(datas[0]);  //a
        // console.log(datas[1]);  //b
        // console.log(datas[2]);  //c

        // const user = { "name": "Tom", "age": 30 };
        // console.log(user.name); //Tom
        // console.log(user.age); //30
        






        // //建立Promise--(1)
        // function show(data) 
        // {
        //     const promise = new Promise((resolve, reject) => {  //非同步程式碼
        //         setTimeout(() => { resolve(data) }, 1000)    
        //     });
        //     return promise;  
        // }


        // //async await => 用同步的程式語法結構來完成非同步的效果 --(1-2) 
        // //可以取代要寫很多 .then() 的麻煩
        // //IIFE
        // (async () => {     //和async function xx() =>{ let data... } 一樣的意思
        //     let data = await show("A");
        //     console.log(data);
        //     data = await show("B");
        //     console.log(data);
        //     data = await show("C");
        //     console.log(data);
        // })();


        // //使用Promise --(1-1)
        // show("A")
        //     .then((data) => {       //then()是接收resolve的
        //         console.log(data)  //顯示A
        //         return show("B") //傳回呼叫show(B)
        //     })
        //     .then((data) => {
        //         console.log(data)  //顯示B
        //         return show("C") //傳回呼叫show(C)
        //     })
        //     .then((data) => {
        //         console.log(data) //顯示C
        //     });




        // //建立一個Promise物件--(0)
        // const promise = new Promise((resolve, reject) => {
        //     //非同步程式碼
        //     const num = Math.random() > 0.5 ? 1 : 0;

        //     if (num) {
        //         resolve("成功 > 0.5");
        //     } else {
        //         reject("失敗 < 0.5")
        //     }
        // });

        // //使用 Promise --(0-1)
        // promise
        //     .then((data) => {  //接收resolve的
        //         console.log(data);
        //     })
        //     .catch((err) => {   //接收reject的
        //         console.log(err);
        //     })
        //     .finally(() => {    //不管如何都執行
        //         console.log("END");
        //     })




        // setTimeout(function () {
        //     console.log('A');
        // }, 1000);
        // setTimeout(function () {
        //     console.log('B');
        // }, 1000);
        // setTimeout(function () {
        //     console.log('C');
        // }, 1000);
         


        // setTimeout(function () {
        //     console.log('A');
        // }, 3000);
        // setTimeout(function () {
        //     console.log('B');
        // }, 2000);
        // setTimeout(function () {
        //     console.log('C');
        // }, 1000);



        // setTimeout(function () 
        // {
        //     console.log('A');
        //     setTimeout(function () 
        //    {
        //         console.log('B');
        //         setTimeout(function ()
        //        {
        //             console.log('C');
        //        }, 1000);
        //    }, 1000);
        // }, 1000);


    </script>
    
}
